# {{ ansible_managed }}

# Please refer to the documentation in the bird-doc package or BIRD User's
# Guide on http://bird.network.cz/ for more information on configuring BIRD and
# adding routing protocols.

# Change this into your BIRD router ID. It's a world-wide unique identification
# of your router, usually one of router's IPv4 addresses.
router id {{ router_id }};

# The Device protocol is not a real routing protocol. It doesn't generate any
# routes and it only serves as a module for getting information about network
# interfaces from the kernel.
protocol device {
}

# The Kernel protocol is not a real routing protocol. Instead of communicating
# with other routers in the network, it performs synchronization of BIRD's
# routing tables with the OS kernel.
protocol kernel {
	learn;
	kernel table 10;
	metric 64;	# Use explicit kernel route metric to avoid collisions
			# with non-BIRD routes in the kernel routing table

	# Import only routes added by our helper daemons
	import where (krt_source = 23);

	export all;	# Actually insert routes into the kernel routing table
}

protocol direct {
	interface "freifunk"; # used for anycast addresses
}

protocol ospf {
	area 0 {
		interface "wg-c*", "wg-e*";
	};
	import all;
	export all;
}

protocol static unreachable_default {
        preference 0;
        route 0.0.0.0/0 reject;
}
{% if ffrl_peers is defined %}

define FFRL_IP = {{ ffrl_local.v4 }};
define FFRL_NET = {{ ffrl_local.v4 }}/32;

protocol static unreachable_ffrl {
        preference 0;
        route {{ ffrl_local.v4 }}/32 reject;
}

function is_default() {
	return (net = 0.0.0.0/0);
};

table ffrl;

protocol pipe pipe_ffrl {
        peer table ffrl;
        # Import only the default route
        import filter {
                if is_default() then {
                        # Use FFRL_IP as source (for NAT)
                        krt_prefsrc = FFRL_IP;
                        accept;
                }
                reject;
        };
        # Export only our public IP address
        export where (net = FFRL_NET);
}

template bgp bgp_ffrl {
        table ffrl;
        local as 65380;
        import where is_default();
        # Export only our public IP address
        export where (net = FFRL_NET);
}
{% for peer in ffrl_peers %}

protocol bgp ffrl_{{ peer.name | replace("-", "_") }} from bgp_ffrl {
	description "FFRL {{ peer.name }}";
        neighbor {{ peer.v4 | ipaddr('address') }} as 201701;
{% if "pref" in peer %}
        default bgp_local_pref {{ peer.pref }};
{% endif %}
};
{% endfor %}
{% endif %}
